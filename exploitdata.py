import pandas as pd
import matplotlib.pyplot as plt
from tkinter import *
import tkinter.tix as tix
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR

import numpy as np

## Auteur: Paul Roc

def init_data():
    NAME_DATA =''
    NAME_EXT =''
    i =int(0)
    NAME_FILE = str(input('Saisir nom_fichier.extension:\n'))
    #print('NAME_FILE={}'.format(NAME_FILE))
    # creation du nom du fichier et de son extension
    while NAME_FILE[i] != '.':
        NAME_DATA += NAME_FILE[i]
        #print(NAME_DATA)
        i+=1
        imax =i
        if imax == len(NAME_FILE)-1:
            error_msg = "PAS D'EXTENSION"
            print(error_msg)
            exit(0)
    #print('NAME_DATA={}'.format(NAME_DATA))
    for i in range(imax+1,len(NAME_FILE)):
        NAME_EXT += NAME_FILE[i]
    #print('NAME_EXT={}'.format(NAME_EXT))

    if NAME_EXT == 'xlsx':
        data = pd.read_excel(NAME_FILE)
        #print(data.columns)
    elif NAME_EXT == 'csv':
        data = pd.read_csv(NAME_FILE)
        #print(data.columns)
    else:
        error_msg ='extension non prise en charge'
        print(error_msg)
        exit(0)
    return data

def choice_columns(data):
    columns = data.columns
    i =int(0)
    print(data.columns)
    X_NAME = str(input('pour les x entrer le titre de la colonne\n'))
    while X_NAME != columns[i]:
        imax = i
        if imax == len(columns)-1:
            error_msg='la colonne x entrée ne correspond a aucune colonnes du dataset'
            print(error_msg)
            exit(0)
        i+=1

    Y_NAME = str(input('pour les y entrer le titre de la colonne\n'))
    while Y_NAME != columns[i]:
        imax =i
        if imax == len(columns)-1:
            error_msg='la colonne y entrée ne correspond a aucune colonnes du dataset'
            print(error_msg)
            exit(0)
        i+=1
    if X_NAME == Y_NAME:
        error_msg ='X et Y ne peuvent etre egaux'
        print(error_msg)
        exit(0)
    data = data[[X_NAME, Y_NAME]]
    tab_data = data.values

    return X_NAME, Y_NAME, data, tab_data

def choice_model():
    print('Modele lineaire     -1')
    print('Modele non-lineaire -2')
    MODEL_TYPE = int(input('?: '))
    if MODEL_TYPE == 1: # cas model lineaire
        model = LinearRegression()
    if MODEL_TYPE == 2: # cas non lineaire
        model = SVR(C =100)
    return model

def model_ML(tab_data, model):
    X = tab_data[:,0].reshape(len(tab_data),1)
    Y = tab_data[:,1].reshape(len(tab_data),1)
    model.fit(X,Y)
    Y_pred = model.predict(X)
    R2 = model.score(X,Y)
    return X, Y_pred, R2
def disp_data(x_name, y_name,tab_data, Y_pred, R2 ):
    fig1 = plt.figure(figsize=(15,6.8))
    plt.subplot(111)
    plt.scatter(tab_data[:,0], tab_data[:,1],
                c='black',
                marker='+',
                label=r'données exp')
    plt.plot(tab_data[:,0], Y_pred,
             c='red',
             label=r'$R^2$={:.3f}'.format(R2),
             linewidth=1)
    plt.xlabel(x_name)
    plt.ylabel(y_name)
    plt.title(y_name + str(' en fonction de ') + x_name)
    plt.legend()
    plt.grid()
    plt.show()

def window():
    error_msg = 'colonne X introuvable'
    root = Tk()
    root.title('Visualisation de données')
    root.geometry('1080x720')
    root.minsize(1080,720)
    '''root.rowconfigure(0, weight=1)
    root.columnconfigure(0, weight=1)'''
    #root.iconbitmap('LogoDGA.ico')
    list_data = list(init_data().columns)
    #affichage texte test
    text_stat(root, 'Entrer le nom du fichier').grid(row=0, column=0)
    text_entry(root, 'data.extension').grid(row=1, column=0)
    Button(root, text='VALIDER')
    text_stat(root, "Messages d'erreurs").grid(row=0, column=1)
    text_entry(root, error_msg).grid(row=1, column=1)
    text_stat(root, 'Colonne X').grid(row=2, column=0)
    liste_data_disp = tix.ComboBox(root, values=list_data)
    liste_data_disp.grid(row=3, column=0)
    text_stat(root, 'Colonne Y').grid(row=4, column=0)
    root.mainloop()



def text_entry(window, default_entry):
    text_var = StringVar()
    text_var.set(default_entry)
    widget =Entry(window, textvariable=text_var, width=20)
    return widget
def text_stat(window, default_entry):
    text_var =StringVar()
    text_var.set(default_entry)
    widget =Label(window, textvariable=text_var, width=30)
    return widget
'''
x_name, y_name, data, tab_data = choice_columns(init_data())
print('ok')
X, Y_pred, R2 = model_ML(tab_data,choice_model())
disp_data(x_name, y_name, tab_data,Y_pred,R2)
'''
'''
prochains objectif : Ajouter une fenetre tkinter 
pour entrer les données tapées habituellement en console
'''

window()